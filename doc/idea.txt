1. 主程序
/*
错误提示字体颜色: 34
成功提示字体颜色: 31

帐户状态:
0 - normal
1 - locked
2 - frozen

退出 :
1. 在任一子程序, 输入quit返回上一级.
2. 在功能列表层级, 输入quit结束程序.
*/
    1.1, 判断用户是否登录, 并返回用户信息.
         def login()
         A. 普通用户 (进入循环菜单)
            1.1.1, 打印功能列表
                 1). 商城
                     def shopping_mall()
                 2). 还款
                     def repay()
                 3). 取款
                     def "withdraw()
                 4). 转帐
                     def transfer()
                 5). 帐单
                     def bill()
                 6). 退出
         B. 管理帐户 (进入循环菜单)
            1.1.2, 打印功能列表
                 1). 添加帐户
                     def new_account()
                 2). 解锁帐户
                     def unlock()
                 3). 修改用户额度
                     def adjustment()
                 4). 冻结帐户
                     def freeze()
                 5). 解冻帐户
                     def unfreeze()
                 6). 退出
2. 登录
   def login()
   2.1, 用户输入用户名密码
        1). 对用户输入进行处理strip()
        2). 判断
            A). 用户输入是否是quit?
                -- 是: 退出程序
                -- 不是: 进入下一步 ==>2.1.2.c
            B). 用户输入用户名是否存在?
                a). 不存在: 需重输.
                b). 存在: 判断密码是否正确
                   -- 不正确: 需重输, 重输超过三次, 锁定帐户 (提示联系管理员解锁并退出程序)
                   -- 正确: 判断用户是普通用户还是管理帐户, 返回相应帐户信息
                           -- 若帐户已冻结, 提示联系管理员解冻并退出程序

3. 商城
   def shopping_mall()
   3.1, 打印商品列表
   3.2, 用户输入商品编号和购买数量
        1). 判断输入的商品是否存在, 及购买数量是否合适
          -- 商品存在且购买数量<=库存 : 下一步 ==> 3.3
          -- else: 请用户输入商品编号及购买数量
        2). 用户输入quit退出
   3.3, 判断帐户余额是否足够支付
        -- 不足够支付: 重输商品编号和购买数量 (重复3.2判断)
        -- 足够支付: 下一步 ==> 3.4
   3.4, 打印用户购买商品清单
   3.5, 购买成功
        1). 扣减帐户余额, 并打印更新的帐户信息; 同时, 更新帐户信息写回account.py
            @ATM LOG
        2). 扣减库存, 并写回repository.py

4. 还款
   def repay()
   4.1, 打印当前欠款金额
   4.2, 用户输入还款金额
        1). 判断输入是否是quit
            -- 是: 退出
            -- 不是: 下一步 ==> 4.2.2
        2). 判断输入的金额是否是数字
            -- 是: 下一步 ==> 4.3
            -- 不是: 重输
   4.3, 还款成功
        1). 更新帐户余额, 并打印更新的帐户信息; 更新的帐户信息写回account.py
            @ATM LOG

5. 取款
   def withdraw()
   5.1, 用户输入取款金额
   5.2, 对用户输入进行处理strip()
   5.3, 判断输入是否是quit
            -- 是: 退出
            -- 不是: 下一步 ==> 5.4
   5.4, 判断输入是否是数字
        -- 是: 下一步 ==> 5.4
        -- 不是: 重输
   5.5, 判断输入的数字是否<当前帐户余额
        -- 是: 下一步 ==> 5.5
        -- 不是: 重输
   5.6, 借钱成功
        1). 扣减帐户余额, 并打印更新的帐户信息; 更新的帐户信息写回account.py
            @ATM LOG

6. 转帐
   def transfer()
   6.1, 用户输入收款用户名和转帐金额
   6.2, 判断输入是否是quit
            -- 是: 退出
            -- 不是: 下一步 ==> 6.3
   6.3, 判断用户名是否存在
        -- 存在: 判断转帐金额是否是数字
                -- 是数字且金额小于帐户余额: 下一步 ==> 6.3
                -- else: 重输
        -- 不存在: 重输
   6.4, 转帐成功
        1). 扣减帐户余额, 并打印更新的帐户信息; 更新的帐户信息写回account.py
            @ATM LOG

7. 帐单
   def bill()
   7.1, 用户输入年,月
   7.2, 判断输入是否是quit
        -- 是: 退出程序
        -- 不是: 下一步 ==> 7.3
   7.3, 判断用户输入是否有效
        -- 有效: 下一步 ==> 7.4
        -- 无效: 重输
   7.4, 打印帐单明细

8. 添加帐户
   def new_account()
   8.1, 用户输入用户名和密码及帐户信息
   8.2, 判断输入是否是quit
        -- 是: 退出程序
        -- 不是: 下一步 ==> 8.3
   8.3, 判断用户名是否存在
        -- 是: 重输
        -- 不是: 下一步 ==> 8.4
   8.4, 添加成功
        1). 将用户信息添加到account.py

9. 解锁帐户
   def unlock()
   9.1, 用户输入需要解锁的用户名
   9.2, 判断输入是否是quit
        -- 是: 退出程序
        -- 不是: 下一步 ==> 9.3
   9.3, 判断帐户是否已被锁定
        -- 是: 下一步
        -- 不是: 重输
   9.4, 解锁成功
        1). 将用户信息更新到account.py

10. 修改用户额度
    def adjustment()
    10.1, 用户输入用户名
    10.2, 判断输入是否是quit
        -- 是: 退出程序
        -- 不是: 下一步 ==> 10.3
    10.3, 修改成功
        1). 将用户信息更新到account.py

11. 冻结帐户
    def freeze()
    11.1, 用户输入用户名
    11.2, 判断输入是否是quit
        -- 是: 退出程序
        -- 不是: 下一步 ==> 11.3
    11.3, 冻结成功
        1). 将用户信息更新到account.py

12. 解冻帐户
    def unfreeze()
    12.1, 用户输入用户名
    12.2, 判断输入是否是quit
        -- 是: 退出程序
        -- 不是: 下一步 ==> 12.3
    12.3, 解冻成功
        1). 将用户信息更新到account.py


common:
    a. 判断输入是否是quit
    b. 判断用户名是否存在
    c. 更新account.py



